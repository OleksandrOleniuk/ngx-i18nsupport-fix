{"version":3,"file":"testing_utils.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/builders/src/xliffmergebuilder/testing_utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,SAAS,EAAQ,MAAM,EAAC,MAAM,sBAAsB,CAAC;AAChG,OAAO,EAAC,oBAAoB,EAAE,eAAe,EAAC,MAAM,mCAAmC,CAAC;AACxF,OAAO,EAAC,iCAAiC,EAAC,MAAM,gCAAgC,CAAC;AACjF,OAAO,EAAC,SAAS,EAAC,MAAM,2BAA2B,CAAC;AAEpD;;;GAGG;AACH,MAAM,kBAAkB,GAAG,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC;AAChF,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,CAC/B,kBAAkB,EAClB,oCAAoC,CACrC,CAAC;AACF,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,eAAe,CAAC,aAAa,CAAC,CAAC;AACvD,MAAM,CAAC,MAAM,UAAU,GAAS,SAAS,CAAC,MAAM,CAAC,CAAC;AAElD,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,MAAY;IAChD,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,kBAAkB,EAAE,CAAC;IACjD,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;IAClE,MAAM,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IAE/C,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC/F,MAAM,aAAa,GAAG,IAAI,oBAAoB,CAC5C,gBAAgB,EAChB,gBAAgB,EAChB,IAAI,iCAAiC,CAAC,SAAS,EAAE,gBAAgB,CAAC,CACnE,CAAC;IACF,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IAEzD,OAAO;QACL,SAAS;QACT,aAAa,EAAE,aAAa;QAC5B,SAAS;KACV,CAAC;AACJ,CAAC","sourcesContent":["import {experimental, getSystemPath, join, normalize, Path, schema} from '@angular-devkit/core';\r\nimport {TestingArchitectHost, TestProjectHost} from '@angular-devkit/architect/testing';\r\nimport {WorkspaceNodeModulesArchitectHost} from '@angular-devkit/architect/node';\r\nimport {Architect} from '@angular-devkit/architect';\r\n\r\n/**\r\n * We are using a test workspace from the test folder.\r\n * In this workspace the xliffmerge builder is already configured.\r\n */\r\nconst ngxi18nsupportRoot = normalize(join(normalize(__dirname), '../../../..'));\r\nexport const workspaceRoot = join(\r\n  ngxi18nsupportRoot,\r\n  'src/builders/test/hello-world-app/',\r\n);\r\nexport const host = new TestProjectHost(workspaceRoot);\r\nexport const outputPath: Path = normalize('dist');\r\n\r\nexport async function createArchitect(wsRoot: Path) {\r\n  const registry = new schema.CoreSchemaRegistry();\r\n  registry.addPostTransform(schema.transforms.addUndefinedDefaults);\r\n  const workspaceSysPath = getSystemPath(wsRoot);\r\n\r\n  const workspace = await experimental.workspace.Workspace.fromPath(host, host.root(), registry);\r\n  const architectHost = new TestingArchitectHost(\r\n    workspaceSysPath,\r\n    workspaceSysPath,\r\n    new WorkspaceNodeModulesArchitectHost(workspace, workspaceSysPath),\r\n  );\r\n  const architect = new Architect(architectHost, registry);\r\n\r\n  return {\r\n    workspace,\r\n    architectHost: architectHost,\r\n    architect,\r\n  };\r\n}\r\n"]}